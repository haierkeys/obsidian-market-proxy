/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS,
  default: () => GithubProxy
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var sendHandle;
var AppProxy = class {
  constructor() {
    sendHandle = window.electron.ipcRenderer.send;
  }
  reg(plugin) {
    console.log("\u6CE8\u518Capp\u4EE3\u7406");
    window.electron.ipcRenderer.send = function(a, b, e, ...rest) {
      if (eisURL(e, plugin)) {
        matchUrl(e, plugin);
      }
      console.log("app\u4EE3\u7406", a, b, e, rest);
      sendHandle(a, b, e, ...rest);
    };
  }
  unReg(plugin) {
    console.log("\u6CE8\u9500app\u4EE3\u7406");
    window.electron.ipcRenderer.send = sendHandle;
  }
};
var GithubProxy = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.proxyServers = {
      github_diybeta_proxy: {
        down: "https://github.diybeta.com/https://github.com/",
        raw: "https://github.diybeta.com/https://raw.githubusercontent.com/",
        home: "https://github.diybeta.com/https://github.com/"
      }
    };
    this.proxyReplace = [
      {
        match: (url) => url.startsWith("https://github.com/") && url.indexOf("/releases/download/") >= 0,
        to: (url) => url.replace("https://github.com/", this.proxyServers[this.settings.proxyServer].down)
      },
      {
        match: (url) => url.startsWith("https://raw.githubusercontent.com/"),
        to: (url) => url.replace("https://raw.githubusercontent.com/", this.proxyServers[this.settings.proxyServer].raw)
      },
      {
        match: (url) => url.startsWith("https://github.com/"),
        to: (url) => url.replace("https://github.com/", this.proxyServers[this.settings.proxyServer].home)
      }
    ];
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings(isStatusCheck = true) {
    await this.saveData(this.settings);
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new GithubProxySettingTab(this.app, this));
    this.appProxy = new AppProxy();
    this.appProxy.reg(this);
  }
  onunload() {
    this.appProxy.unReg(this);
  }
};
function eisURL(e, plugin) {
  if (!e || !e.url) {
    return false;
  }
  return plugin.proxyReplace.some((item) => item.match(e.url));
}
function matchUrl(e, plugin) {
  console.log("\u539F\u59CB\u8BBF\u95EE\uFF1A" + JSON.stringify(e));
  for (const item of plugin.proxyReplace) {
    if (e && e.url && item.match(e.url)) {
      e.url = item.to(e.url);
      console.log("\u5B9E\u9645\u8BBF\u95EE\uFF1A" + JSON.stringify(e));
      if (!e.headers) {
        e.headers = {};
      }
      e.headers["content-type"] = "application/x-www-form-urlencoded";
      e.headers["Access-Control-Allow-Origin"] = "*";
      return true;
    }
  }
  return false;
}
var DEFAULT_SETTINGS = {
  // 是否自动上传
  proxyServer: ""
};
var GithubProxySettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl: set } = this;
    set.empty();
    new import_obsidian.Setting(set).setName("\u4EE3\u7406\u670D\u52A1\u5668").setDesc(`\u901A\u8FC7\u9009\u62E9\u4E0D\u540C\u7684\u670D\u52A1\u5668\u6765\u5207\u6362\u4EE3\u7406\uFF0C\u53EF\u4EE5\u89E3\u51B3\u67D0\u4E9B\u60C5\u51B5\u4E0B\uFF0C\u67D0\u4E2A\u670D\u52A1\u5668\u65E0\u6CD5\u8BBF\u95EE\u7684\u60C5\u51B5\u3002\u5F53\u524D\u4EE3\u7406\u670D\u52A1\u5668\uFF1A`).addDropdown((dropDown) => {
      dropDown.addOption(this.plugin.settings.proxyServer, "\u8BF7\u9009\u62E9");
      for (const one in this.plugin.proxyServers) {
        dropDown.addOption(one, one);
      }
      dropDown.onChange(async (value) => {
        this.plugin.settings.proxyServer = value;
        await this.plugin.saveSettings();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IEFwcCwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBQbGF0Zm9ybSB9IGZyb20gXCJvYnNpZGlhblwiXG5cblxuXG5cbmxldCBzZW5kSGFuZGxlOiBhbnlcbmNsYXNzIEFwcFByb3h5IHtcbiAgcHVibGljIHNlbmRIYW5kbGU6IGFueVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHNlbmRIYW5kbGUgPSAod2luZG93IGFzIGFueSkuZWxlY3Ryb24uaXBjUmVuZGVyZXIuc2VuZFxuICB9XG5cbiAgcmVnKHBsdWdpbjogR2l0aHViUHJveHkpIHtcbiAgICBjb25zb2xlLmxvZyhcIlx1NkNFOFx1NTE4Q2FwcFx1NEVFM1x1NzQwNlwiKVxuICAgIDsod2luZG93IGFzIGFueSkuZWxlY3Ryb24uaXBjUmVuZGVyZXIuc2VuZCA9IGZ1bmN0aW9uIChhOiBhbnksIGI6IGFueSwgZTogYW55LCAuLi5yZXN0OiBhbnkpIHtcbiAgICAgIGlmIChlaXNVUkwoZSwgcGx1Z2luKSkge1xuICAgICAgICBtYXRjaFVybChlLCBwbHVnaW4pXG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhcImFwcFx1NEVFM1x1NzQwNlwiLCBhLCBiLCBlLCByZXN0KVxuICAgICAgc2VuZEhhbmRsZShhLCBiLCBlLCAuLi5yZXN0KVxuICAgIH1cbiAgfVxuXG4gIHVuUmVnKHBsdWdpbjogR2l0aHViUHJveHkpIHtcbiAgICBjb25zb2xlLmxvZyhcIlx1NkNFOFx1OTUwMGFwcFx1NEVFM1x1NzQwNlwiKVxuICAgIDsod2luZG93IGFzIGFueSkuZWxlY3Ryb24uaXBjUmVuZGVyZXIuc2VuZCA9IHNlbmRIYW5kbGVcbiAgfVxufVxuXG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2l0aHViUHJveHkgZXh0ZW5kcyBQbHVnaW4ge1xuICBzZXR0aW5nczogUGx1Z2luU2V0dGluZ3NcbiAgYXBwUHJveHk6IEFwcFByb3h5XG5cbiAgcHJveHlTZXJ2ZXJzOiB7IFtrZXk6IHN0cmluZ106IHsgZG93bjogc3RyaW5nOyByYXc6IHN0cmluZzsgaG9tZTogc3RyaW5nIH0gfSA9IHtcbiAgICBnaXRodWJfZGl5YmV0YV9wcm94eToge1xuICAgICAgZG93bjogXCJodHRwczovL2dpdGh1Yi5kaXliZXRhLmNvbS9odHRwczovL2dpdGh1Yi5jb20vXCIsXG4gICAgICByYXc6IFwiaHR0cHM6Ly9naXRodWIuZGl5YmV0YS5jb20vaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1wiLFxuICAgICAgaG9tZTogXCJodHRwczovL2dpdGh1Yi5kaXliZXRhLmNvbS9odHRwczovL2dpdGh1Yi5jb20vXCIsXG4gICAgfSxcbiAgfVxuXG4gIHByb3h5UmVwbGFjZTogeyBtYXRjaDogKHVybDogc3RyaW5nKSA9PiBib29sZWFuOyB0bzogKHVybDogc3RyaW5nKSA9PiBzdHJpbmcgfVtdID0gW1xuICAgIHtcbiAgICAgIG1hdGNoOiAodXJsOiBzdHJpbmcpID0+IHVybC5zdGFydHNXaXRoKFwiaHR0cHM6Ly9naXRodWIuY29tL1wiKSAmJiB1cmwuaW5kZXhPZihcIi9yZWxlYXNlcy9kb3dubG9hZC9cIikgPj0gMCxcbiAgICAgIHRvOiAodXJsOiBzdHJpbmcpID0+IHVybC5yZXBsYWNlKFwiaHR0cHM6Ly9naXRodWIuY29tL1wiLCB0aGlzLnByb3h5U2VydmVyc1t0aGlzLnNldHRpbmdzLnByb3h5U2VydmVyXS5kb3duKSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG1hdGNoOiAodXJsOiBzdHJpbmcpID0+IHVybC5zdGFydHNXaXRoKFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1wiKSxcbiAgICAgIHRvOiAodXJsOiBzdHJpbmcpID0+IHVybC5yZXBsYWNlKFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1wiLCB0aGlzLnByb3h5U2VydmVyc1t0aGlzLnNldHRpbmdzLnByb3h5U2VydmVyXS5yYXcpLFxuICAgIH0sXG4gICAge1xuICAgICAgbWF0Y2g6ICh1cmw6IHN0cmluZykgPT4gdXJsLnN0YXJ0c1dpdGgoXCJodHRwczovL2dpdGh1Yi5jb20vXCIpLFxuICAgICAgdG86ICh1cmw6IHN0cmluZykgPT4gdXJsLnJlcGxhY2UoXCJodHRwczovL2dpdGh1Yi5jb20vXCIsIHRoaXMucHJveHlTZXJ2ZXJzW3RoaXMuc2V0dGluZ3MucHJveHlTZXJ2ZXJdLmhvbWUpLFxuICAgIH0sXG4gIF1cblxuICBhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSlcbiAgfVxuICBhc3luYyBzYXZlU2V0dGluZ3MoaXNTdGF0dXNDaGVjazogYm9vbGVhbiA9IHRydWUpIHtcbiAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpXG4gIH1cblxuICBhc3luYyBvbmxvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKVxuICAgIC8vIFx1NkNFOFx1NTE4Q1x1OEJCRVx1N0Y2RVx1OTAwOVx1OTg3OVxuICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgR2l0aHViUHJveHlTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSlcblxuICAgIHRoaXMuYXBwUHJveHkgPSBuZXcgQXBwUHJveHkoKVxuICAgIHRoaXMuYXBwUHJveHkucmVnKHRoaXMpXG4gIH1cblxuICBvbnVubG9hZCgpIHtcbiAgICB0aGlzLmFwcFByb3h5LnVuUmVnKHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gZWlzVVJMKGU6IGFueSwgcGx1Z2luOiBHaXRodWJQcm94eSk6IGJvb2xlYW4ge1xuICBpZiAoIWUgfHwgIWUudXJsKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHBsdWdpbi5wcm94eVJlcGxhY2Uuc29tZSgoaXRlbTogYW55KSA9PiBpdGVtLm1hdGNoKGUudXJsKSlcbn1cblxuZnVuY3Rpb24gbWF0Y2hVcmwoZTogYW55LCBwbHVnaW46IEdpdGh1YlByb3h5KTogYm9vbGVhbiB7XG4gIGNvbnNvbGUubG9nKFwiXHU1MzlGXHU1OUNCXHU4QkJGXHU5NUVFXHVGRjFBXCIgKyBKU09OLnN0cmluZ2lmeShlKSlcbiAgZm9yIChjb25zdCBpdGVtIG9mIHBsdWdpbi5wcm94eVJlcGxhY2UpIHtcbiAgICBpZiAoZSAmJiBlLnVybCAmJiBpdGVtLm1hdGNoKGUudXJsKSkge1xuICAgICAgZS51cmwgPSBpdGVtLnRvKGUudXJsKVxuICAgICAgY29uc29sZS5sb2coXCJcdTVCOUVcdTk2NDVcdThCQkZcdTk1RUVcdUZGMUFcIiArIEpTT04uc3RyaW5naWZ5KGUpKVxuICAgICAgaWYgKCFlLmhlYWRlcnMpIHtcbiAgICAgICAgZS5oZWFkZXJzID0ge31cbiAgICAgIH1cbiAgICAgIGUuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCJcbiAgICAgIGUuaGVhZGVyc1tcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiXSA9IFwiKlwiXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQbHVnaW5TZXR0aW5ncyB7XG4gIHByb3h5U2VydmVyOiBzdHJpbmdcbn1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFBsdWdpblNldHRpbmdzID0ge1xuICAvLyBcdTY2MkZcdTU0MjZcdTgxRUFcdTUyQThcdTRFMEFcdTRGMjBcbiAgcHJveHlTZXJ2ZXI6IFwiXCIsXG59XG5cbmNsYXNzIEdpdGh1YlByb3h5U2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICBwbHVnaW46IEdpdGh1YlByb3h5XG5cbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogR2l0aHViUHJveHkpIHtcbiAgICBzdXBlcihhcHAsIHBsdWdpbilcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpblxuICB9XG4gIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgY29uc3QgeyBjb250YWluZXJFbDogc2V0IH0gPSB0aGlzXG5cbiAgICBzZXQuZW1wdHkoKVxuXG4gICAgbmV3IFNldHRpbmcoc2V0KVxuICAgICAgLnNldE5hbWUoXCJcdTRFRTNcdTc0MDZcdTY3MERcdTUyQTFcdTU2NjhcIilcbiAgICAgIC5zZXREZXNjKGBcdTkwMUFcdThGQzdcdTkwMDlcdTYyRTlcdTRFMERcdTU0MENcdTc2ODRcdTY3MERcdTUyQTFcdTU2NjhcdTY3NjVcdTUyMDdcdTYzNjJcdTRFRTNcdTc0MDZcdUZGMENcdTUzRUZcdTRFRTVcdTg5RTNcdTUxQjNcdTY3RDBcdTRFOUJcdTYwQzVcdTUxQjVcdTRFMEJcdUZGMENcdTY3RDBcdTRFMkFcdTY3MERcdTUyQTFcdTU2NjhcdTY1RTBcdTZDRDVcdThCQkZcdTk1RUVcdTc2ODRcdTYwQzVcdTUxQjVcdTMwMDJcdTVGNTNcdTUyNERcdTRFRTNcdTc0MDZcdTY3MERcdTUyQTFcdTU2NjhcdUZGMUFgKVxuICAgICAgLmFkZERyb3Bkb3duKChkcm9wRG93bjogYW55KSA9PiB7XG4gICAgICAgIGRyb3BEb3duLmFkZE9wdGlvbih0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm94eVNlcnZlciwgXCJcdThCRjdcdTkwMDlcdTYyRTlcIilcbiAgICAgICAgZm9yIChjb25zdCBvbmUgaW4gdGhpcy5wbHVnaW4ucHJveHlTZXJ2ZXJzKSB7XG4gICAgICAgICAgZHJvcERvd24uYWRkT3B0aW9uKG9uZSwgb25lKVxuICAgICAgICB9XG4gICAgICAgIGRyb3BEb3duLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJveHlTZXJ2ZXIgPSB2YWx1ZVxuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpXG4g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
