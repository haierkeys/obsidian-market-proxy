/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MarketProxy
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var AppProxy = class {
  constructor() {
    ;
    window.sendHandle = window.electron.ipcRenderer.send;
  }
  register() {
    ;
    window.electron.ipcRenderer.send = function(a, b, e, ...rest) {
      UrlRewrite(e);
      window.sendHandle(a, b, e, ...rest);
    };
  }
  unRegister() {
    ;
    window.electron.ipcRenderer.send = window.sendHandle;
  }
};
var NativeProxy = class {
  constructor() {
    ;
    window.sendHandle = window.Capacitor.toNative;
  }
  register() {
    ;
    window.toNativeContainer = function() {
      ;
      window.Capacitor.toNative = (a, b, c, d) => {
        if (a == "App" && b == "requestUrl") {
          UrlRewrite(c);
        }
        return window.sendHandle(a, b, c, d);
      };
    };
    window.toNativeContainer();
  }
  unRegister() {
    ;
    window.Capacitor.toNative = window.sendHandle;
  }
};
function isNeedUrlRewrite(e) {
  if (!e || !e.url) {
    return false;
  }
  if (e.url.startsWith("https://github.com/") || e.url.startsWith("https://raw.githubusercontent.com/")) {
    return true;
  }
  return false;
}
function UrlRewrite(e) {
  if (e && e.url && isNeedUrlRewrite(e)) {
    const src = e.url;
    e.url = "https://github.diybeta.com/" + e.url;
    if (window.Capacitor.isLoggingEnabled) {
      window.console.info(JSON.stringify({ src, proxy: e.url }));
    }
    if (!e.headers) {
      e.headers = {};
    }
    e.headers["content-type"] = "application/x-www-form-urlencoded";
    e.headers["Access-Control-Allow-Origin"] = "*";
  }
}
var MarketProxy = class extends import_obsidian.Plugin {
  async onload() {
    if (import_obsidian.Platform.isDesktop) {
      this.proxy = new AppProxy();
    } else {
      this.proxy = new NativeProxy();
    }
    this.proxy.register();
  }
  onunload() {
    this.proxy.unRegister();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IFBsdWdpbiwgUGxhdGZvcm0gfSBmcm9tIFwib2JzaWRpYW5cIlxuXG5jbGFzcyBBcHBQcm94eSB7XG4gIHB1YmxpYyBzZW5kSGFuZGxlOiBhbnlcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICA7KHdpbmRvdyBhcyBhbnkpLnNlbmRIYW5kbGUgPSAod2luZG93IGFzIGFueSkuZWxlY3Ryb24uaXBjUmVuZGVyZXIuc2VuZFxuICB9XG5cbiAgcmVnaXN0ZXIoKSB7XG4gICAgOyh3aW5kb3cgYXMgYW55KS5lbGVjdHJvbi5pcGNSZW5kZXJlci5zZW5kID0gZnVuY3Rpb24gKGE6IGFueSwgYjogYW55LCBlOiBhbnksIC4uLnJlc3Q6IGFueSkge1xuICAgICAgVXJsUmV3cml0ZShlKVxuICAgICAgOyh3aW5kb3cgYXMgYW55KS5zZW5kSGFuZGxlKGEsIGIsIGUsIC4uLnJlc3QpXG4gICAgfVxuICB9XG5cbiAgdW5SZWdpc3RlcigpIHtcbiAgICA7KHdpbmRvdyBhcyBhbnkpLmVsZWN0cm9uLmlwY1JlbmRlcmVyLnNlbmQgPSAod2luZG93IGFzIGFueSkuc2VuZEhhbmRsZVxuICB9XG59XG5cbmNsYXNzIE5hdGl2ZVByb3h5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgOyh3aW5kb3cgYXMgYW55KS5zZW5kSGFuZGxlID0gKHdpbmRvdyBhcyBhbnkpLkNhcGFjaXRvci50b05hdGl2ZVxuICB9XG4gIHJlZ2lzdGVyKCkge1xuICAgIDsod2luZG93IGFzIGFueSkudG9OYXRpdmVDb250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICA7KHdpbmRvdyBhcyBhbnkpLkNhcGFjaXRvci50b05hdGl2ZSA9IChhOiBhbnksIGI6IGFueSwgYzogYW55LCBkOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGEgPT0gXCJBcHBcIiAmJiBiID09IFwicmVxdWVzdFVybFwiKSB7XG4gICAgICAgICAgVXJsUmV3cml0ZShjKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAod2luZG93IGFzIGFueSkuc2VuZEhhbmRsZShhLCBiLCBjLCBkKVxuICAgICAgfVxuICAgIH1cbiAgICA7KHdpbmRvdyBhcyBhbnkpLnRvTmF0aXZlQ29udGFpbmVyKClcbiAgfVxuXG4gIHVuUmVnaXN0ZXIoKSB7XG4gICAgOyh3aW5kb3cgYXMgYW55KS5DYXBhY2l0b3IudG9OYXRpdmUgPSAod2luZG93IGFzIGFueSkuc2VuZEhhbmRsZVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzTmVlZFVybFJld3JpdGUoZTogYW55KTogYm9vbGVhbiB7XG4gIGlmICghZSB8fCAhZS51cmwpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBpZiAoZS51cmwuc3RhcnRzV2l0aChcImh0dHBzOi8vZ2l0aHViLmNvbS9cIikgfHwgZS51cmwuc3RhcnRzV2l0aChcImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9cIikpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBVcmxSZXdyaXRlKGU6IGFueSk6IHZvaWQge1xuICBpZiAoZSAmJiBlLnVybCAmJiBpc05lZWRVcmxSZXdyaXRlKGUpKSB7XG4gICAgY29uc3Qgc3JjID0gZS51cmxcbiAgICBlLnVybCA9IFwiaHR0cHM6Ly9naXRodWIuZGl5YmV0YS5jb20vXCIgKyBlLnVybFxuXG4gICAgaWYgKCh3aW5kb3cgYXMgYW55KS5DYXBhY2l0b3IuaXNMb2dnaW5nRW5hYmxlZCkge1xuICAgICAgd2luZG93LmNvbnNvbGUuaW5mbyhKU09OLnN0cmluZ2lmeSh7IHNyYzogc3JjLCBwcm94eTogZS51cmwgfSkpXG4gICAgfVxuICAgIGlmICghZS5oZWFkZXJzKSB7XG4gICAgICBlLmhlYWRlcnMgPSB7fVxuICAgIH1cbiAgICBlLmhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiXG4gICAgZS5oZWFkZXJzW1wiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCJdID0gXCIqXCJcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXJrZXRQcm94eSBleHRlbmRzIFBsdWdpbiB7XG4gIHByb3h5OiBBcHBQcm94eSB8IE5hdGl2ZVByb3h5XG5cbiAgYXN5bmMgb25sb2FkKCkge1xuICAgIGlmIChQbGF0Zm9ybS5pc0Rlc2t0b3ApIHtcbiAgICAgIHRoaXMucHJveHkgPSBuZXcgQXBwUHJveHkoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByb3h5ID0gbmV3IE5hdGl2ZVByb3h5KClcbiAgICB9XG4gICAgdGhpcy5wcm94eS5yZWdpc3RlcigpXG4gIH1cblxuICBvbnVubG9hZCgpIHtcbiAgICB0aGlzLnByb3h5LnVuUmVnaXN0ZXIoKVxuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQWlDO0FBRWpDLElBQU0sV0FBTixNQUFlO0FBQUEsRUFHYixjQUFjO0FBQ1o7QUFBQyxJQUFDLE9BQWUsYUFBYyxPQUFlLFNBQVMsWUFBWTtBQUFBLEVBQ3JFO0FBQUEsRUFFQSxXQUFXO0FBQ1Q7QUFBQyxJQUFDLE9BQWUsU0FBUyxZQUFZLE9BQU8sU0FBVSxHQUFRLEdBQVEsTUFBVyxNQUFXO0FBQzNGLGlCQUFXLENBQUM7QUFDWCxNQUFDLE9BQWUsV0FBVyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUk7QUFBQSxJQUM5QztBQUFBLEVBQ0Y7QUFBQSxFQUVBLGFBQWE7QUFDWDtBQUFDLElBQUMsT0FBZSxTQUFTLFlBQVksT0FBUSxPQUFlO0FBQUEsRUFDL0Q7QUFDRjtBQUVBLElBQU0sY0FBTixNQUFrQjtBQUFBLEVBQ2hCLGNBQWM7QUFDWjtBQUFDLElBQUMsT0FBZSxhQUFjLE9BQWUsVUFBVTtBQUFBLEVBQzFEO0FBQUEsRUFDQSxXQUFXO0FBQ1Q7QUFBQyxJQUFDLE9BQWUsb0JBQW9CLFdBQVk7QUFDL0M7QUFBQyxNQUFDLE9BQWUsVUFBVSxXQUFXLENBQUMsR0FBUSxHQUFRLEdBQVEsTUFBVztBQUN4RSxZQUFJLEtBQUssU0FBUyxLQUFLLGNBQWM7QUFDbkMscUJBQVcsQ0FBQztBQUFBLFFBQ2Q7QUFDQSxlQUFRLE9BQWUsV0FBVyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQUEsTUFDOUM7QUFBQSxJQUNGO0FBQ0MsSUFBQyxPQUFlLGtCQUFrQjtBQUFBLEVBQ3JDO0FBQUEsRUFFQSxhQUFhO0FBQ1g7QUFBQyxJQUFDLE9BQWUsVUFBVSxXQUFZLE9BQWU7QUFBQSxFQUN4RDtBQUNGO0FBRUEsU0FBUyxpQkFBaUIsR0FBaUI7QUFDekMsTUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUs7QUFDaEIsV0FBTztBQUFBLEVBQ1Q7QUFDQSxNQUFJLEVBQUUsSUFBSSxXQUFXLHFCQUFxQixLQUFLLEVBQUUsSUFBSSxXQUFXLG9DQUFvQyxHQUFHO0FBQ3JHLFdBQU87QUFBQSxFQUNUO0FBQ0EsU0FBTztBQUNUO0FBRUEsU0FBUyxXQUFXLEdBQWM7QUFDaEMsTUFBSSxLQUFLLEVBQUUsT0FBTyxpQkFBaUIsQ0FBQyxHQUFHO0FBQ3JDLFVBQU0sTUFBTSxFQUFFO0FBQ2QsTUFBRSxNQUFNLGdDQUFnQyxFQUFFO0FBRTFDLFFBQUssT0FBZSxVQUFVLGtCQUFrQjtBQUM5QyxhQUFPLFFBQVEsS0FBSyxLQUFLLFVBQVUsRUFBRSxLQUFVLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUFBLElBQ2hFO0FBQ0EsUUFBSSxDQUFDLEVBQUUsU0FBUztBQUNkLFFBQUUsVUFBVSxDQUFDO0FBQUEsSUFDZjtBQUNBLE1BQUUsUUFBUSxjQUFjLElBQUk7QUFDNUIsTUFBRSxRQUFRLDZCQUE2QixJQUFJO0FBQUEsRUFDN0M7QUFDRjtBQUVBLElBQXFCLGNBQXJCLGNBQXlDLHVCQUFPO0FBQUEsRUFHOUMsTUFBTSxTQUFTO0FBQ2IsUUFBSSx5QkFBUyxXQUFXO0FBQ3RCLFdBQUssUUFBUSxJQUFJLFNBQVM7QUFBQSxJQUM1QixPQUFPO0FBQ0wsV0FBSyxRQUFRLElBQUksWUFBWTtBQUFBLElBQy9CO0FBQ0EsU0FBSyxNQUFNLFNBQVM7QUFBQSxFQUN0QjtBQUFBLEVBRUEsV0FBVztBQUNULFNBQUssTUFBTSxXQUFXO0FBQUEsRUFDeEI7QUFDRjsiLAogICJuYW1lcyI6IFtdCn0K
